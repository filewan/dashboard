{"version":3,"file":"markdown.component.js","sourceRoot":"","sources":["../../src/markdown/markdown.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, ElementRef, OnInit, AfterViewInit, Input, PLATFORM_ID, Inject } from '@angular/core';\nimport { MarkdownService } from './markdown.service';\n// import './prism.languages';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as Prism from 'prismjs';\n\n@Component({\n    selector: 'markdown,[Markdown]',\n    template: '<ng-content></ng-content>',\n    styles: [\n        `.token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {\n            background: none;\n        }`\n    ]\n})\nexport class MarkdownComponent implements OnInit {\n    private _path: string;\n    private _data: string;\n    private _md: any;\n    private _ext: string;\n    changeLog: string[] = [];\n\n    constructor(\n        private mdService: MarkdownService,\n        private el: ElementRef,\n        @Inject(PLATFORM_ID) private platformId: string\n    ) { }\n\n    ngOnInit() {\n\n    }\n\n    @Input()\n    set path(value:string) {\n      if(value){\n        this._path = value;\n        this.onPathChange();\n      }\n    }\n\n    @Input()\n    set data(value:string) {\n      if(value){\n        this._data = value;\n        this.onDataChange(value);\n      }\n    }\n\n\n    // on input\n    onDataChange(data:string){\n      if (data) {\n        this.el.nativeElement.innerHTML = this.mdService.compile(data);\n      } else {\n        this.el.nativeElement.innerHTML = '';\n      }\n      this.highlightContent(false);\n    }\n\n    /**\n     *  After view init\n     */\n    ngAfterViewInit() {\n      if(this._path) {\n        this.onPathChange();\n      } else if (!this._data) {\n        this.processRaw();\n      }\n    }\n\n    processRaw() {\n      this._md = this.prepare(decodeHtml(this.el.nativeElement.innerHTML));\n      this.el.nativeElement.innerHTML = this.mdService.compile(this._md);\n      this.highlightContent(false);\n    }\n\n    /**\n     * get remote conent;\n     */\n    onPathChange() {\n        this._ext = this._path && this._path.split('.').splice(-1).join();\n        this.mdService.getContent(this._path)\n            .then(data => {\n                this._md = this._ext !== 'md' ? '```' + this._ext + '\\n' + data + '\\n```' : data;\n                this.el.nativeElement.innerHTML = this.mdService.compile(this.prepare(this._md));\n                this.highlightContent(false);\n            },\n            err => this.handleError);\n    }\n\n    /**\n     * catch http error\n     */\n    private handleError(error: any): Promise<any> {\n        console.error('An error occurred', error); // for demo purposes only\n        return Promise.reject(error.message || error);\n    }\n\n    /**\n     * Prepare string\n     */\n     prepare(raw: string) {\n        if (!raw) {\n            return '';\n        }\n        if (this._ext === 'md' || !this.path) {\n            let isCodeBlock = false;\n            return raw.split('\\n').map((line: string) => {\n                if (this.trimLeft(line).substring(0, 3) === \"```\") {\n                    isCodeBlock = !isCodeBlock;\n                }\n                return isCodeBlock ? line : line.trim();\n            }).join('\\n');\n        }\n        return raw.replace(/\\\"/g, '\\'');\n    }\n\n    /**\n     * Trim left whitespace\n     */\n    private trimLeft(line: string) {\n        return line.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    /**\n     * Use Prism to highlight code snippets only on the browser\n     * @param {string} async param passed directly to Prism.highlightAll\n     */\n    private highlightContent(async: boolean): void {\n      if (isPlatformBrowser(this.platformId)) {\n        Prism.highlightAll(async);\n      }\n    }\n}\n\nfunction decodeHtml(html:string) { // https://stackoverflow.com/a/7394787/588521\n    var txt = document.createElement(\"textarea\");\n    txt.innerHTML = html;\n    return txt.value;\n}\n"]}