{"version":3,"file":"markdown.service.js","sourceRoot":"","sources":["../../src/markdown/markdown.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,KAAM,QAAQ,MAAM,QAAQ,CAAC;AAEpC,OAAO,2BAA2B,CAAC;AACnC,OAAO,yBAAyB,CAAC;AACjC,OAAO,iCAAiC,CAAC;AACzC,OAAO,uBAAuB,CAAA;;IAO5B;yBADwB,IAAI,QAAQ,CAAC,QAAQ,EAAE;QAE7C,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;KAC3B;IAED,sCAAsC;;IACtC,oCAAU;;IAAV,UAAW,IAAY;QAClB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KACrE;IAED,sBAAW,qCAAQ;aAAnB;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;SACvB;;;OAAA;IAED,cAAc;;IACP,qCAAW;;IAAlB,UAAmB,GAAQ;QACzB,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;KACzB;IAGM,0CAAgB,GAAvB,UAAwB,OAAY;QAClC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;YACtB,GAAG,EAAE,IAAI;YACT,MAAM,EAAE,IAAI;YACZ,MAAM,EAAE,KAAK;YACb,QAAQ,EAAE,KAAK;YACf,QAAQ,EAAE,KAAK;YACf,UAAU,EAAE,IAAI;YAChB,WAAW,EAAE,KAAK;SACnB,EAAE,OAAO,CAAC,CAAC;QACZ,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAClC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;KAC9B;IAED,0BAA0B;;IACnB,iCAAO;;IAAd,UAAe,IAAW;QACvB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KACxB;IAED,cAAc;;IACN,qCAAW;;IAAnB,UAAoB,KAAU;QAC5B,IAAI,MAAc,CAAC;QACnB,EAAE,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC;YAC3B,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;YAChC,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC/C,MAAM,GAAM,KAAK,CAAC,MAAM,YAAM,KAAK,CAAC,UAAU,IAAI,EAAE,UAAI,GAAK,CAAC;SAC/D;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;SAC3D;QACD,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KACjC;IAED,gDAAgD;;IACxC,wCAAc;;IAAtB;QACE,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,UAAS,IAAW;YAC7C,EAAE,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACnC,IAAI,GAAG,IAAI;qBACR,OAAO,CAAC,cAAc,EAAE,qHAAqH,CAAC;qBAC9I,OAAO,CAAC,cAAc,EAAE,6HAA6H,CAAC,CAAC;gBACtJ,MAAM,CAAC,+BAA+B,GAAG,IAAI,GAAG,OAAO,CAAC;aACzD;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,OAAO,CAAC;aAChC;SACF,CAAC;KACJ;;gBAnEH,UAAU;;;;0BAXX;;SAYa,eAAe","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport * as  markedNs from 'marked';\n\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/fromPromise';\nimport 'rxjs/add/operator/map'\n\n\n\n@Injectable()\nexport class MarkdownService {\n  private _renderer:any = new markedNs.Renderer();\n  constructor() {\n    this.extendRenderer();\n    this.setMarkedOptions({});\n  }\n\n  //get the content from remote resource\n  getContent(path: string):Promise<any> {\n       return fetch(path).then(this.extractData).catch(this.handleError);\n   }\n\n   public get renderer() {\n     return this._renderer;\n   }\n\n   // handle data\n   public extractData(res: any): string {\n     return res.text() || '';\n   }\n\n\n   public setMarkedOptions(options: any) {\n     options = Object.assign({\n       gfm: true,\n       tables: true,\n       breaks: false,\n       pedantic: false,\n       sanitize: false,\n       smartLists: true,\n       smartypants: false\n     }, options);\n     options.renderer = this._renderer;\n     markedNs.setOptions(options);\n   }\n\n   // comple markdown to html\n   public compile(data:string) {\n      return markedNs(data);\n   }\n\n   //handle error\n   private handleError(error: any):any {\n     let errMsg: string;\n     if (error instanceof fetch) {\n       const body = error.json() || '';\n       const err = body.error || JSON.stringify(body);\n       errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n     } else {\n       errMsg = error.message ? error.message : error.toString();\n     }\n     return Observable.throw(errMsg);\n   }\n\n   // extend marked render to support todo checkbox\n   private extendRenderer() {\n     this._renderer.listitem = function(text:string) {\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\n      text = text\n        .replace(/^\\s*\\[ \\]\\s*/, '<input type=\"checkbox\" style=\" vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px; \" disabled> ')\n        .replace(/^\\s*\\[x\\]\\s*/, '<input type=\"checkbox\" style=\" vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px; \" checked disabled> ');\n          return '<li style=\"list-style: none\">' + text + '</li>';\n        } else {\n          return '<li>' + text + '</li>';\n        }\n      };\n   }\n}\n"]}