"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs/add/operator/map");
var http_1 = require("@angular/common/http");
var core_1 = require("@angular/core");
var options_1 = require("../shared/options");
/**
 * @description A provider with every interfaces for Leads
 * @export
 * @class Intercom
 */
var Leads = (function () {
    function Leads(http, options) {
        this.http = http;
        this.options = options;
    }
    Leads.prototype.create = function (lead) {
        if (lead.user_id) {
            console.warn('You\'re trying to assign a user_id to a new user. To update a user, please use the Leads.update method.');
            delete lead.user_id;
        }
        return this.http.post('https://api.intercom.io/contacts', lead, this.options.getOptions())
            .map(function (res) { return res.body; });
    };
    Leads.prototype.get = function (leadId) {
        return this.http.get("https://api.intercom.io/contacts/" + leadId, this.options.getOptions())
            .map(function (res) { return res.body; });
    };
    Leads.prototype.update = function (lead) {
        if (!lead.user_id) {
            return this.http.post('https://api.intercom.io/contacts', lead, this.options.getOptions())
                .map(function (res) { return res.body; });
        }
        else {
            throw new Error('You did not pass in the required user_id to the Leads.update method. Please use Leads.create to create a fresh lead.');
        }
    };
    Leads.prototype.list = function () {
        return this.http.get('https://api.intercom.io/contacts', this.options.getOptions())
            .map(function (res) { return res.body; });
    };
    Leads.prototype.listByEmail = function (email) {
        return this.http.get("https://api.intercom.io/contacts?email=" + email, this.options.getOptions())
            .map(function (res) { return res.body; });
    };
    Leads.prototype.delete = function (leadId) {
        return this.http.delete("https://api.intercom.io/contacts/" + leadId, this.options.getOptions())
            .map(function (res) { return res.body; });
    };
    Leads.prototype.convert = function (leadId, user) {
        return this.http.post("https://api.intercom.io/contacts/convert", { contact: { user_id: leadId }, user: user }, this.options.getOptions())
            .map(function (res) { return res.body; });
    };
    Leads.prototype.scroll = function (userId) {
        if (userId) {
            return this.http.get("https://api.intercom.io/contacts/scroll?scroll_param=" + userId, this.options.getOptions())
                .map(function (res) { return res.body; });
        }
        else {
            return this.http.get("https://api.intercom.io/contacts/scroll", this.options.getOptions())
                .map(function (res) { return res.body; });
        }
    };
    return Leads;
}());
Leads.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
Leads.ctorParameters = function () { return [
    { type: http_1.HttpClient, },
    { type: options_1.Options, },
]; };
exports.Leads = Leads;
//# sourceMappingURL=leads.js.map