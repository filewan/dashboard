"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
// Abstract Class to Catch implementations
var IntercomEnvironment = (function () {
    function IntercomEnvironment() {
    }
    IntercomEnvironment.prototype.init = function (data) {
        throw new Error('Error init IntercomEnvironment');
    };
    IntercomEnvironment.prototype.boot = function (data) {
        throw new Error('Error boot IntercomEnvironment');
    };
    IntercomEnvironment.prototype.update = function (data) {
        throw new Error('Error update IntercomEnvironment');
    };
    IntercomEnvironment.prototype.trackEvent = function (eventName, data) {
        throw new Error('Error trackEvent IntercomEnvironment');
    };
    IntercomEnvironment.prototype.shutdown = function () {
        throw new Error('Error shutdown IntercomEnvironment');
    };
    return IntercomEnvironment;
}());
exports.IntercomEnvironment = IntercomEnvironment;
// Intercom -> IntercomEnvironment
var Intercom = (function () {
    function Intercom(intercom) {
        this.intercom = intercom;
    }
    Intercom.prototype.init = function (data) {
        return this.intercom.init(data);
    };
    Intercom.prototype.boot = function (data) {
        return this.intercom.boot(data);
    };
    Intercom.prototype.update = function (data) {
        return this.intercom.update(data);
    };
    Intercom.prototype.trackEvent = function (eventName, data) {
        return this.intercom.trackEvent(eventName, data);
    };
    Intercom.prototype.shutdown = function () {
        return this.intercom.shutdown();
    };
    return Intercom;
}());
Intercom.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
Intercom.ctorParameters = function () { return [
    { type: IntercomEnvironment, },
]; };
exports.Intercom = Intercom;
//# sourceMappingURL=intercom.js.map