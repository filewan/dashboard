import { Pipe, Inject, InjectionToken } from "@angular/core";
import * as numeral from "numeral";
export var DEFAULT_NUMERAL = new InjectionToken("DEFAULT_NUMERAL");
var NumeralPipe = (function () {
    function NumeralPipe(value) {
        this.numeral = numeral(value);
    }
    NumeralPipe.prototype.transform = function (value, format) {
        return numeral(value).format(format);
    };
    Object.defineProperty(NumeralPipe.prototype, "version", {
        get: function () {
            return this.numeral.version;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumeralPipe.prototype, "isNumeral", {
        get: function () {
            return this.numeral.isNumeral;
        },
        enumerable: true,
        configurable: true
    });
    NumeralPipe.prototype.locale = function (key) {
        return this.numeral.locale(key);
    };
    NumeralPipe.prototype.register = function (what, key, value) {
        return this.numeral.register(what, key, value);
    };
    NumeralPipe.prototype.zeroFormat = function (format) {
        return this.numeral.zeroFormat(format);
    };
    NumeralPipe.prototype.nullFormat = function (format) {
        return this.numeral.nullFormat(format);
    };
    NumeralPipe.prototype.defaultFormat = function (format) {
        return this.numeral.defaultFormat(format);
    };
    NumeralPipe.prototype.clone = function () {
        return new NumeralPipe(this.numeral.clone().value());
    };
    NumeralPipe.prototype.format = function (inputString, roundingFunction) {
        return this.numeral.format(inputString, roundingFunction);
    };
    NumeralPipe.prototype.formatCurrency = function (inputString) {
        return this.numeral.formatCurrency(inputString);
    };
    NumeralPipe.prototype.unformat = function (inputString) {
        return this.numeral.unformat(inputString);
    };
    NumeralPipe.prototype.value = function () {
        return this.numeral.value();
    };
    NumeralPipe.prototype.valueOf = function () {
        return this.numeral.valueOf();
    };
    NumeralPipe.prototype.set = function (value) {
        this.numeral.set(value);
        return this;
    };
    NumeralPipe.prototype.add = function (value) {
        this.numeral.add(value);
        return this;
    };
    NumeralPipe.prototype.subtract = function (value) {
        this.numeral.subtract(value);
        return this;
    };
    NumeralPipe.prototype.multiply = function (value) {
        this.numeral.multiply(value);
        return this;
    };
    NumeralPipe.prototype.divide = function (value) {
        this.numeral.divide(value);
        return this;
    };
    NumeralPipe.prototype.difference = function (value) {
        return this.numeral.difference(value);
    };
    NumeralPipe.prototype.validate = function (value, culture) {
        return this.numeral.validate(value, culture);
    };
    NumeralPipe.decorators = [
        { type: Pipe, args: [{ name: "numeral" },] },
    ];
    /** @nocollapse */
    NumeralPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DEFAULT_NUMERAL,] },] },
    ]; };
    return NumeralPipe;
}());
export { NumeralPipe };
